/* Tailwind v4 entry */
@import "tailwindcss";

/* Make dark: apply when .dark is on a parent (class-based dark mode) */
@custom-variant dark (&:where(.dark, .dark *));

/* Design tokens: expose colors via --color-* so Tailwind generates utilities */
@theme {
  /* Base (light) theme â€” HSL values only as requested */

  /* Surfaces and text */
  --color-background: hsl(var(--background));
  --color-foreground: hsl(var(--foreground));
  --color-card: hsl(var(--card));
  --color-card-foreground: hsl(var(--card-foreground));
  --color-popover: hsl(var(--popover));
  --color-popover-foreground: hsl(var(--popover-foreground));

  /* Semantic colors */
  --color-primary: hsl(var(--primary));
  --color-primary-foreground: hsl(var(--primary-foreground));
  --color-secondary: hsl(var(--secondary));
  --color-secondary-foreground: hsl(var(--secondary-foreground));
  --color-muted: hsl(var(--muted));
  --color-muted-foreground: hsl(var(--muted-foreground));
  --color-accent: hsl(var(--accent));
  --color-accent-foreground: hsl(var(--accent-foreground));
  --color-destructive: hsl(var(--destructive));
  --color-destructive-foreground: hsl(var(--destructive-foreground));
  --color-success: hsl(var(--success));
  --color-success-foreground: hsl(var(--success-foreground));
  --color-warning: hsl(var(--warning));
  --color-warning-foreground: hsl(var(--warning-foreground));

  /* Borders/inputs/ring */
  --color-border: hsl(var(--border));
  --color-input: hsl(var(--input));
  --color-ring: hsl(var(--ring));

  /* Sidebar semantics */
  --color-sidebar-background: hsl(var(--sidebar-background));
  --color-sidebar-foreground: hsl(var(--sidebar-foreground));
  --color-sidebar-primary: hsl(var(--sidebar-primary));
  --color-sidebar-primary-foreground: hsl(var(--sidebar-primary-foreground));
  --color-sidebar-accent: hsl(var(--sidebar-accent));
  --color-sidebar-accent-foreground: hsl(var(--sidebar-accent-foreground));
  --color-sidebar-border: hsl(var(--sidebar-border));
  --color-sidebar-ring: hsl(var(--sidebar-ring));

  /* Non-color tokens */
  --radius: 0.75rem;
}

/* Raw HSL numbers (no hsl()) so we can reuse them in composed vars */
@layer theme {
  :root, :host {
    /* Light theme numeric HSL tokens */
    --background: 222 47% 5%;
    --foreground: 210 40% 98%;
    --card: 222 47% 7%;
    --card-foreground: 210 40% 98%;
    --popover: 222 47% 7%;
    --popover-foreground: 210 40% 98%;

    --primary: 221 83% 53%;
    --primary-foreground: 210 40% 98%;
    --primary-glow: 221 83% 63%;

    --secondary: 217 32% 17%;
    --secondary-foreground: 210 40% 98%;

    --muted: 215 28% 15%;
    --muted-foreground: 215 20% 65%;

    --accent: 217 32% 17%;
    --accent-foreground: 210 40% 98%;

    --destructive: 0 84% 60%;
    --destructive-foreground: 210 40% 98%;

    --success: 142 76% 36%;
    --success-foreground: 210 40% 98%;

    --warning: 45 93% 47%;
    --warning-foreground: 222 47% 5%;

    --border: 217 32% 17%;
    --input: 217 32% 17%;
    --ring: 221 83% 53%;

    /* Sidebar (light) HSL numbers */
    --sidebar-background: 0 0% 98%;
    --sidebar-foreground: 240 5.3% 26.1%;
    --sidebar-primary: 240 5.9% 10%;
    --sidebar-primary-foreground: 0 0% 98%;
    --sidebar-accent: 240 4.8% 95.9%;
    --sidebar-accent-foreground: 240 5.9% 10%;
    --sidebar-border: 220 13% 91%;
    --sidebar-ring: 217.2 91.2% 59.8%;

    /* Composed (keep as plain CSS vars for arbitrary values) */
    --gradient-primary: linear-gradient(135deg, hsl(var(--primary)), hsl(var(--primary-glow)));
    --gradient-card: linear-gradient(145deg, hsl(var(--card)), hsl(217 32% 9%));
    --gradient-border: linear-gradient(90deg, transparent, hsl(var(--border)), transparent);

    --shadow-card: 0 8px 32px -8px hsl(var(--background) / 0.3);
    --shadow-glow: 0 0 40px hsl(var(--primary) / 0.15);

    --transition-smooth: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
  }

  /* Dark theme overrides (class-based via @custom-variant dark) */
  @variant dark {
    :root, :host {
      --background: 222.2 84% 4.9%;
      --foreground: 210 40% 98%;
      --card: 222.2 84% 4.9%;
      --card-foreground: 210 40% 98%;
      --popover: 222.2 84% 4.9%;
      --popover-foreground: 210 40% 98%;

      /* Note: your original dark set flips primary to very light text; kept as-is */
      --primary: 210 40% 98%;
      --primary-foreground: 222.2 47.4% 11.2%;

      --secondary: 217.2 32.6% 17.5%;
      --secondary-foreground: 210 40% 98%;

      --muted: 217.2 32.6% 17.5%;
      --muted-foreground: 215 20.2% 65.1%;

      --accent: 217.2 32.6% 17.5%;
      --accent-foreground: 210 40% 98%;

      --destructive: 0 62.8% 30.6%;
      --destructive-foreground: 210 40% 98%;

      --border: 217.2 32.6% 17.5%;
      --input: 217.2 32.6% 17.5%;
      --ring: 212.7 26.8% 83.9%;

      /* Sidebar (dark) */
      --sidebar-background: 240 5.9% 10%;
      --sidebar-foreground: 240 4.8% 95.9%;
      --sidebar-primary: 224.3 76.3% 48%;
      --sidebar-primary-foreground: 0 0% 100%;
      --sidebar-accent: 240 3.7% 15.9%;
      --sidebar-accent-foreground: 240 4.8% 95.9%;
      --sidebar-border: 240 3.7% 15.9%;
      --sidebar-ring: 217.2 91.2% 59.8%;
    }
  }
}

/* Base resets mapped to tokens via utilities */
@layer base {
  * {
    @apply border-border;
  }
  body {
    @apply bg-background text-foreground;
  }
}





@layer components {
  /* Premium Card Styles */
  .card-elegant {
    background: var(--gradient-card);
    border: 1px solid var(--border-premium);
    box-shadow: var(--shadow-premium);
    backdrop-filter: blur(20px);
    transition: var(--transition-smooth);
  }
  
  .card-elegant:hover {
    transform: translateY(-2px);
    box-shadow: var(--shadow-elegant), var(--shadow-glow);
  }

  /* Premium Button Variants */
  .btn-google {
    background: var(--glass-bg);
    border: 1px solid var(--glass-border);
    backdrop-filter: blur(20px);
    transition: var(--transition-bounce);
    position: relative;
    overflow: hidden;
  }
  
  .btn-google::before {
    content: '';
    position: absolute;
    top: 0;
    left: -100%;
    width: 100%;
    height: 100%;
    background: var(--gradient-primary);
    opacity: 0;
    transition: var(--transition-smooth);
    z-index: -1;
  }
  
  .btn-google:hover::before {
    left: 0;
    opacity: 0.05;
  }
  
  .btn-google:hover {
    transform: translateY(-1px);
    border-color: hsl(var(--primary) / 0.2);
    box-shadow: var(--shadow-elegant);
  }

  /* Gradient Text */
  .gradient-text {
    background: var(--gradient-primary);
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    background-clip: text;
  }

  /* Hero Gradient Background */
  .hero-gradient {
    background: var(--gradient-hero);
    position: relative;
  }
  
  .hero-gradient::before {
    content: '';
    position: absolute;
    inset: 0;
    background: linear-gradient(135deg, transparent 0%, hsl(0 0% 0% / 0.1) 100%);
    pointer-events: none;
  }

  /* Trust Indicators */
  .trust-indicator {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    transition: var(--transition-smooth);
  }
  
  .trust-indicator:hover {
    transform: scale(1.05);
  }

  .trust-dot {
    width: 8px;
    height: 8px;
    border-radius: 50%;
    animation: pulse 2s infinite;
  }
  
  @keyframes pulse {
    0%, 100% { opacity: 1; }
    50% { opacity: 0.6; }
  }

  /* Glass Morphism Effect */
  .glass-card {
    background: var(--glass-bg);
    border: 1px solid var(--glass-border);
    backdrop-filter: blur(20px);
    -webkit-backdrop-filter: blur(20px);
  }
}

/* Usage helpers (optional):
   - Gradients/shadows via arbitrary values:
     bg-[var(--gradient-primary)]
     shadow-[var(--shadow-card)]
     [transition:var(--transition-smooth)]
   - Radius token can be used in arbitrary properties:
     rounded-[var(--radius)]
*/
